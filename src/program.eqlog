Pred VariableShadowing: ();
Pred ConflictingTypes: ();

// # The AST, encoded algebraically/relationally.
Sort ModuleNode;

Sort TypeNode;
Sort OptTypeNode;

Sort ExprNode;
Sort ExprListNode;

Sort StmtNode;
Sort StmtListNode;

Sort FunctionNode;

Sort Var;
Sort StringLiteral;
Sort NumberLiteral;

Sort ArgListNode;

// Module(node, top_lvl_stmts)
Pred Module : ModuleNode * StmtListNode;

Pred VoidTypeNode : TypeNode;
Pred BooleanTypeNode : TypeNode;
Pred NumberTypeNode : TypeNode;
Pred StringTypeNode : TypeNode;
// FunctionTypeNode(node, domain, codomain)
Pred FunctionTypeNode : TypeNode * ArgListNode * TypeNode;

Pred VariableExprNode : ExprNode * Var;
Pred VoidExprNode : ExprNode;
Pred FalseExprNode : ExprNode;
Pred TrueExprNode : ExprNode;
Pred StringLiteralExprNode : ExprNode * StringLiteral;
Pred NumberLiteralExprNode : ExprNode * NumberLiteral;
Pred EqualsExprNode : ExprNode * ExprNode * ExprNode;
// AppExprNode(node, func, args)
Pred AppExprNode : ExprNode * ExprNode * ExprListNode;
Pred FunctionExprNode : ExprNode * FunctionNode;

Pred ExprStmtNode : StmtNode * ExprNode;
// LetStmtNode(node, var, initial_value)
Pred LetStmtNode : StmtNode * Var * OptTypeNode * ExprNode;
// ReturnStmtNode(node, return_value)
Pred ReturnStmtNode : StmtNode * ExprNode;
Pred ReturnVoidStmtNode : StmtNode;
Pred FunctionStmtNode : StmtNode * FunctionNode;
// IfStmtNode(node, condition, true_branch, false_branch)
Pred IfStmtNode : StmtNode * ExprNode * StmtListNode * StmtListNode;
// WhileStmtNode(node, condition, body)
Pred WhileStmtNode : StmtNode * ExprNode * StmtListNode;

// Function(node, function_name, domain, codomain, body)
Pred Function : FunctionNode * Var * ArgListNode * OptTypeNode * StmtListNode;

// ## <Sort>NodeList operators.
Pred NilExprListNode : ExprListNode;
Pred ConsExprListNode : ExprListNode * ExprNode * ExprListNode;

Pred NilStmtListNode : StmtListNode;
Pred ConsStmtListNode : StmtListNode * StmtNode * StmtListNode;

// ## ArgListNode operators.
Pred NilArgListNode : ArgListNode;
Pred ConsArgListNode : ArgListNode * Var * OptTypeNode * ArgListNode;

// ## OptTypeNode operators.
Pred NoneOptTypeNode : OptTypeNode;
Pred SomeOptTypeNode : OptTypeNode * TypeNode;


// # Semantic types.

// ## Simple (i.e. mono) types.
Sort Type;
Sort TypeList;

// ## Semantic type operators.
Func VoidType : Type;
Func BooleanType : Type;
Func NumberType : Type;
Func StringType : Type;
// FunctionType(node, domain, codomain)
Func FunctionType : TypeList * Type -> Type;
// Inverses to FunctionType:
// - DomainTypes(FunctionType(domain, _)) = domain
// - CodomainType(FunctionType(_, codomain)) = codomain
Func DomainTypes : Type -> TypeList;
Func CodomainType : Type -> Type;

Axiom DomainTypes(tau)! => CodomainType(tau)!;
Axiom CodomainType(tau)! => DomainTypes(tau)!;
Axiom
    kappa = FunctionType(sigmas, tau)
    =>
    DomainTypes(kappa) = sigmas
    & CodomainType(kappa) = tau
    ;
Axiom
    sigmas = DomainTypes(kappa)
    & tau = CodomainType(kappa)
    =>
    FunctionType(sigmas, tau) = kappa
    ;

// ## TypeList operators.
// We're equating TypeList elements sometimes. In well-typed programs, this is only possible if the
// type lists have the same length and are made up of the same Types.
Func NilTypeList : TypeList;
Func ConsTypeList : Type * TypeList -> TypeList;
Axiom NilTypeList() = ConsTypeList(_, _) => ConflictingTypes();
Axiom ConsTypeList(head_0, tail_0) = ConsTypeList(head_1, tail_1) => head_0 = head_1 & tail_0 = tail_1;

// ## Joint injectivity of type operators.
Axiom VoidType() = BooleanType() => ConflictingTypes();
Axiom VoidType() = NumberType() => ConflictingTypes();
Axiom VoidType() = StringType() => ConflictingTypes();
Axiom VoidType() = FunctionType(_, _) => ConflictingTypes();

Axiom BooleanType() = NumberType() => ConflictingTypes();
Axiom BooleanType() = StringType() => ConflictingTypes();
Axiom BooleanType() = FunctionType(_, _) => ConflictingTypes();

Axiom NumberType() = StringType() => ConflictingTypes();
Axiom NumberType() = FunctionType(_, _) => ConflictingTypes();

Axiom StringType() = FunctionType(_, _) => ConflictingTypes();

Axiom
    FunctionType(domain_0, codomain_0) = FunctionType(domain_1, codomain_1)
    =>
    domain_0 = domain_1
    & codomain_0 = codomain_1
    ;

// ## Functions assigning to node elements their corresponding semantic Type elements.
Func SemanticType : TypeNode -> Type;
Func SemanticOptType : OptTypeNode -> Type;
Func SemanticArgTypes : ArgListNode -> TypeList;

// The types of expressions and function literals:
Func ExprType : ExprNode -> Type;
Func ExprTypes : ExprListNode -> TypeList;
Func FunctionNodeType : FunctionNode -> Type;

// All of the functions into Type that we've just declared are total.
Axiom tn: TypeNode => SemanticType(tn)!;
Axiom otn: OptTypeNode => SemanticOptType(otn)!;
Axiom agn: ArgListNode => SemanticArgTypes(agn)!;
Axiom en: ExprNode => ExprType(en)!;
Axiom eln: ExprListNode => ExprTypes(eln)!;
Axiom fcn: FunctionNode => FunctionNodeType(fcn)!;

// Since SemanticType is total, these rules will fire for all TypeNodes.
Axiom
    VoidTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    VoidType() = sigma
    ;
Axiom
    BooleanTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    BooleanType() = sigma
    ;
Axiom
    NumberTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    NumberType() = sigma
    ;
Axiom
    StringTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    StringType() = sigma
    ;

// Other axioms assert that SemanticArgTypes and SemanticType are total functions, so this rule
// will fire for al FunctionTypeNodes.
Axiom
    FunctionTypeNode(tn, args, codomain)
    & dom_types = SemanticArgTypes(args)
    & cod_type = SemanticType(codomain)
    & function_type = SemanticType(tn)
    =>
    FunctionType(dom_types, cod_type) = function_type
    ;

// SemanticOptType is total, but only for SomeOptTypeNode elements does it have a determined type.
// If no other rules apply, it will be an opaque Type element determined only by the OptTypeNode
// element.
Axiom
    SomeOptTypeNode(otn, tn)
    & sigma = SemanticType(tn)
    =>
    SemanticOptType(otn) = sigma
    ;

Axiom
    NilArgListNode(al)
    & semantic_types = SemanticArgTypes(al)
    =>
    NilTypeList() = semantic_types
    ;
Axiom
    ConsArgListNode(al, _, head_type, tail)
    & semantic_head = SemanticOptType(head_type)
    & semantic_tail = SemanticArgTypes(tail)
    & semantic_types = SemanticArgTypes(al)
    =>
    semantic_types = ConsTypeList(semantic_head, semantic_tail)
    ;

// ## Determined types, i.e. those that do not contain unsolved type variables.
//
// In well-formed programs, every type should be determined.
//
// Without polymorphism, for example the following program contains an
// undetermined type:
//
//   function foo(x) {}
//
// Here the type of `x` is not determined. Applying the function at least once on an argument with
// determined type will determine the argument type of `foo` though, for example if we add the
// statement `foo(5);`
//
// With polymorphism the above example doesn't work, since `foo` will have type `forall a. a ->
// unit`. However, unsolved type variables remain a problem because we require variables introduced
// using `let` to have a mono/simple type. Consider the following example program:
//
//   function foo() {
//     return foo();
//   }
//
//   let x = foo();
//
// Here `foo`  has type `forall a. () -> a`. Thus, `x` must  be simple type, but it can be any
// simple type: The type of `x` is not determined.

Pred DeterminedType : Type;
Pred DeterminedTypes : TypeList;

// A type list is determined if all of the types it contains are determined.
Axiom sigmas = NilTypeList() => DeterminedTypes(sigmas);
Axiom
    sigmas = ConsTypeList(head, tail)
    & DeterminedType(head)
    & DeterminedTypes(tail)
    =>
    DeterminedTypes(sigmas)
    ;

Axiom sigma = VoidType() => DeterminedType(sigma);
Axiom sigma = BooleanType() => DeterminedType(sigma);
Axiom sigma = NumberType() => DeterminedType(sigma);
Axiom sigma = StringType() => DeterminedType(sigma);
Axiom
    sigma = FunctionType(dom, cod)
    & DeterminedTypes(dom)
    & DeterminedType(cod)
    =>
    DeterminedType(sigma)
    ;
Axiom
    sigmas = DomainTypes(kappa)
    & DeterminedType(kappa)
    =>
    DeterminedTypes(sigmas)
    ;
Axiom
    tau = CodomainType(kappa)
    & DeterminedType(kappa)
    =>
    DeterminedType(tau)
    ;

Axiom
    ConsArgListNode(_, _, otn, _)
    & t = SemanticOptType(otn)
    =>
    DeterminedType(t)
    ;
Axiom
    Function(_, _, _, codomain_otn, _)
    & t = SemanticOptType(codomain_otn)
    =>
    DeterminedType(t)
    ;

// ## Well-founded types
//
// Consider the following (invalid) function definition:
//
//   function foo (x) {
//       x(x);
//   }
//
// If a denotes the type of x, then a must be equal to the function type a => a, which is
// unsatisfiable. To issue an error in cases such as this one, we introduce a binary predicate
// SmallerType such that SmallerType(sigma, tau) holds if and only if sigma is structurally
// strictly smaller than tau.  If we find that a type must be structurally smaller than itself,
// then we generate an error.

Pred SmallerType : Type * Type;
Axiom SmallerType(sigma, tau) & SmallerType(tau, kappa) => SmallerType(sigma, kappa);

Axiom SmallerType(sigma, sigma) => ConflictingTypes();

// SmallerTypes(sigmas, tau) <=> forall sigma in sigma. SmallerType(sigma, tau)
Pred SmallerTypes : TypeList * Type;
Axiom sigmas = NilTypeList() & tau : Type => SmallerTypes(sigmas, tau);
Axiom
    SmallerTypes(ConsTypeList(head, tail), tau)
    =>
    SmallerType(head, tau)
    & SmallerTypes(tail, tau)
    ;
Axiom
    SmallerType(head, tau)
    & SmallerTypes(tail, tau)
    & sigmas = ConsTypeList(head, tail)
    =>
    SmallerTypes(sigmas, tau)
    ;

// All domain types and the codomain of a function type are smaller than the function type.
Axiom kappa = FunctionType(sigmas, tau) => SmallerTypes(sigmas, kappa) & SmallerType(tau, kappa);

// # Type contexts.
Sort TypeContext;

Pred TypeInContext : Type * TypeContext;
Pred TypesInContext : TypeList * TypeContext;

Axiom gamma : TypeContext & NilTypeList()! => TypesInContext(NilTypeList(), gamma);
Axiom
    sigmas = ConsTypeList(sigmas_head, sigmas_tail)
    & TypeInContext(sigmas_head, gamma)
    & TypesInContext(sigmas_tail, gamma)
    =>
    TypesInContext(sigmas, gamma)
    ;

Axiom
    & TypesInContext(ConsTypeList(head, tail), gamma)
    =>
    TypeInContext(head, gamma)
    & TypesInContext(tail, gamma)
    ;

Pred ContextExtension : TypeContext * TypeContext;
Axiom
    ContextExtension(gamma_0, gamma_1)
    & TypeInContext(sigma, gamma_0)
    =>
    TypeInContext(sigma, gamma_1)
    ;

// ## Type contexts are closed under type formers and their inverses.
Axiom
    TypeInContext(FunctionType(dom, cod), gamma)
    =>
    TypesInContext(dom, gamma)
    & TypeInContext(cod, gamma)
    ;
Axiom
    kappa = FunctionType(dom, cod)
    & TypesInContext(dom, gamma)
    & TypeInContext(cod, gamma)
    =>
    TypeInContext(kappa, gamma)
    ;

Axiom
    gamma : TypeContext
    & sigma = VoidType()
    =>
    TypeInContext(sigma, gamma);
Axiom
    gamma : TypeContext
    & sigma = BooleanType()
    =>
    TypeInContext(sigma, gamma);
Axiom
    gamma : TypeContext
    & sigma = NumberType()
    =>
    TypeInContext(sigma, gamma);
Axiom
    gamma : TypeContext
    & sigma = StringType()
    =>
    TypeInContext(sigma, gamma);

// ## The type contexts associated with expressions and statements.
Func ModuleTypeContext : ModuleNode -> TypeContext;
Func FunctionTypeContext : FunctionNode -> TypeContext;
Func ArgListContext: ArgListNode -> TypeContext;
Func StmtTypeContext : StmtNode -> TypeContext;
Func StmtsTypeContext : StmtListNode -> TypeContext;
Func ExprTypeContext : ExprNode -> TypeContext;
Func ExprsTypeContext : ExprListNode -> TypeContext;

Axiom mn : ModuleNode => ModuleTypeContext(mn)!;
Axiom fn : FunctionNode => FunctionTypeContext(fn)!;
Axiom args : ArgListNode => ArgListContext(args)!;
Axiom stmt : StmtNode => StmtTypeContext(stmt)!;
Axiom stmts : StmtListNode => StmtsTypeContext(stmts)!;
Axiom expr : ExprNode => ExprTypeContext(expr)!;
Axiom exprs : ExprListNode => ExprsTypeContext(exprs)!;

// ## Populating the TypeInContext predicate.

// Forward declarations.
Sort GeneralType;
Func VarTypeInArgList : Var * ArgListNode -> GeneralType;
Func MonoType : Type -> GeneralType;

// The type of a function argument is in the context of the arg list of the function.
Axiom
    ConsArgListNode(arg_list, _, head_ty_node, _)
    & ctx = ArgListContext(arg_list)
    & head_ty = SemanticOptType(head_ty_node)
    =>
    TypeInContext(head_ty, ctx)
    ;

// Relate type contexts of node lists with the type contexts of individual nodes in the lists.
Axiom
    ConsArgListNode(al, _, _, tail)
    & ArgListContext(al) = ctx
    =>
    & ArgListContext(tail) = ctx
    ;
Axiom
    ConsStmtListNode(stmts, head, tail)
    & StmtsTypeContext(stmts) = ctx
    =>
    StmtTypeContext(head) = ctx
    & StmtsTypeContext(tail) = ctx
    ;
Axiom
    ConsExprListNode(stmts, head, tail)
    & ExprsTypeContext(stmts) = ctx
    =>
    ExprTypeContext(head) = ctx
    & ExprsTypeContext(tail) = ctx
    ;

// Module type contexts propagate into top level statements.
Axiom
    Module(mn, stmts)
    & ctx = ModuleTypeContext(mn)
    =>
    StmtsTypeContext(stmts) = ctx
    ;

// Function type contexts propagate into bodies.
Axiom
    Function(fn, _, arg_list, _, stmts)
    & ctx = FunctionTypeContext(fn)
    =>
    StmtsTypeContext(stmts) = ctx
    & ArgListContext(arg_list) = ctx
    ;

// ## Propagate type contexts through statements.
Axiom
    ExprStmtNode(stmt, expr)
    & ctx = StmtTypeContext(stmt)
    =>
    ExprTypeContext(expr) = ctx
    ;
Axiom
    LetStmtNode(stmt, _, _, expr)
    & ctx = StmtTypeContext(stmt)
    =>
    ExprTypeContext(expr) = ctx
    ;
Axiom
    ReturnStmtNode(stmt, expr)
    & ctx = StmtTypeContext(stmt)
    =>
    ExprTypeContext(expr) = ctx
    ;
Axiom
    FunctionStmtNode(stmt, func)
    & ambient_ctx = StmtTypeContext(stmt)
    & func_ctx = FunctionTypeContext(func)
    =>
    ContextExtension(ambient_ctx, func_ctx)
    ;
Axiom
    IfStmtNode(stmt, cond, true_branch, false_branch)
    & stmt_ctx = StmtTypeContext(stmt)
    & cond_ctx = ExprTypeContext(cond)
    & true_branch_ctx = StmtsTypeContext(true_branch)
    & false_branch_ctx = StmtsTypeContext(false_branch)
    =>
    stmt_ctx = cond_ctx
    & cond_ctx = true_branch_ctx
    & true_branch_ctx = false_branch_ctx
    ;
Axiom
    WhileStmtNode(stmt, cond, body)
    & stmt_ctx = StmtTypeContext(stmt)
    & cond_ctx = ExprTypeContext(cond)
    & body_ctx = StmtsTypeContext(body)
    =>
    stmt_ctx = cond_ctx
    & cond_ctx = body_ctx
    ;

// ## Propagate type contexts through expressions.

Axiom
    EqualsExprNode(expr, lhs, rhs)
    & expr_ctx = ExprTypeContext(expr)
    & lhs_ctx = ExprTypeContext(lhs)
    & rhs_ctx = ExprTypeContext(rhs)
    =>
    expr_ctx = lhs_ctx
    & lhs_ctx = rhs_ctx
    ;

Axiom
    AppExprNode(expr, fn_expr, arg_exprs)
    & expr_ctx = ExprTypeContext(expr)
    & fn_ctx = ExprTypeContext(fn_expr)
    & args_ctx = ExprsTypeContext(arg_exprs)
    =>
    expr_ctx = fn_ctx
    & fn_ctx = args_ctx
    ;

Axiom
    FunctionExprNode(expr, func)
    & expr_ctx = ExprTypeContext(expr)
    & func_ctx = FunctionTypeContext(func)
    =>
    ContextExtension(expr_ctx, func_ctx)
    ;

// ## Type instantiation.
Sort Instantiation;

Func InstantiationTarget : Instantiation -> TypeContext;

Func Instantiate : Instantiation * Type -> Type;
Func InstantiateList : Instantiation * TypeList -> TypeList;

Axiom
    instances = InstantiateList(_, NilTypeList())
    =>
    instances = NilTypeList()
    ;
Axiom
    InstantiateList(instance, ConsTypeList(head, tail))!
    =>
    Instantiate(instance, head)!
    & InstantiateList(instance, tail)!
    ;

Axiom
    head_instance = Instantiate(instance, head)
    & tail_instance = InstantiateList(instance, tail)
    & instances = InstantiateList(instance, ConsTypeList(head, tail))
    =>
    instances = ConsTypeList(head_instance, tail_instance)
    ;

// ## Instantiation laws.
Axiom
    tau = Instantiate(instance, sigma)
    & TypeInContext(sigma, InstantiationTarget(instance))
    =>
    sigma = tau
    ;

Axiom
    instance_void = Instantiate(_, VoidType())
    =>
    VoidType() = instance_void
    ;
Axiom
    instance_boolean = Instantiate(_, BooleanType())
    =>
    BooleanType() = instance_boolean
    ;
Axiom
    instance_number = Instantiate(_, NumberType())
    =>
    NumberType() = instance_number
    ;
Axiom
    instance_string = Instantiate(_, StringType())
    =>
    StringType() = instance_string
    ;

Axiom
    Instantiate(instance, FunctionType(dom, cod))!
    =>
    InstantiateList(instance, dom)!
    & Instantiate(instance, cod)!
    ;
Axiom
    dom_instances = InstantiateList(instance, dom)
    & cod_instance = Instantiate(instance, cod)
    & func_instance = Instantiate(instance, FunctionType(dom, cod))
    =>
    FunctionType(dom_instances, cod_instance) = func_instance
    ;


// # Variable resolution.

// For each node kind X in which variables matter, we introduce a function
//
//   VarTypeInX : Var * X -> GeneralType
//
// and add axioms such that VarTypeInX(var, n) = sigma holds iff var is considered to be in scope
// for node n and has type sigma. That var must be in scope for n means that var must have been
// introduced *before* n; it is not sufficient for n to introduce the variable.
//
// For X = StmtListNode and X = ArgListNode, note that if n = ConsX(head, tail), then head appears
// before tail in source code. For example, if body is the StmtListNode representing the body of a
// function, then none of the variables introduced in the body will be in scope for body. Instead,
// all of those variables are in scope at the NilStmtListNode of body. Similarly, if args is the
// ArgListNode of a function definition, then the variables listed in args are only in scope for the
// NilArgListNode at the end of args.

Func PolyType : Type -> GeneralType;
// Declared earlier:
// Func MonoType : Type -> GeneralType;
Axiom sigma : Type => MonoType(sigma)!;

Func VarTypeInStmts : Var * StmtListNode -> GeneralType;
Func VarTypeInFunction : Var * FunctionNode -> GeneralType;
// Declared earlier:
// Func VarTypeInArgList : Var * ArgListNode -> GeneralType;
Func VarTypeInExpr : Var * ExprNode -> GeneralType;
Func VarTypeInExprs : Var * ExprListNode -> GeneralType;

// ## Base cases: Nodes that introduce variables

// Every let statements introduces a variable.
Axiom
    ConsStmtListNode(_, head, tail)
    & LetStmtNode(head, var, ty_annot, expr)
    & ty = SemanticOptType(ty_annot)
    & expr_type = ExprType(expr)
    & mono_expr_type = MonoType(expr_type)
    =>
    expr_type = ty
    & VarTypeInStmts(var, tail) = mono_expr_type
    ;

// Every function statement introduces a variable for statements occuring after the function
// statement.
Axiom
    ConsStmtListNode(_, head, _)
    & FunctionStmtNode(head, func)
    & Function(func, _, _, _ ,_)
    =>
    PolyType(FunctionNodeType(func))!
    ;
Axiom
    ConsStmtListNode(_, head, tail)
    & FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & ty = PolyType(FunctionNodeType(func))
    =>
    VarTypeInStmts(var, tail) = ty
    ;

// Every function node introduces the name of the function in the ArgListNode of the function (and
// hence, by the propagation axioms below, also in the body of the function).
Axiom
    Function(func, var, arg, _ ,_)
    & ty = MonoType(FunctionNodeType(func))
    =>
    VarTypeInArgList(var, arg) = ty
    ;

// Every function argument introduces a variable.
Axiom
    ConsArgListNode(_, var, otn, tail)
    & ty = MonoType(SemanticOptType(otn))
    =>
    VarTypeInArgList(var, tail) = ty
    ;

// ## Errors due to multiple introductions of the same variable
//
// For each base node case that introduces a variable, it is an error if the variable is already in
// scope before the node.

Axiom
    ConsStmtListNode(stmts, head, _)
    & LetStmtNode(head, var, _, _)
    & VarTypeInStmts(var, stmts)!
    =>
    VariableShadowing();
Axiom
    FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & VarTypeInStmts(var, stmts)!
    & ConsStmtListNode(stmts, head, _)
    =>
    VariableShadowing()
    ;
Axiom
    Function(func, var, _, _, _)
    & VarTypeInFunction(var, func)!
    =>
    VariableShadowing()
    ;
Axiom
    ConsArgListNode(al, var, _, _)
    & VarTypeInArgList(var, al)!
    =>
    VariableShadowing()
    ;

// ## Propagation of variables through lists
//
// If a variable is in scope for ConsX(head, tail), then it should also be in scope for tail.

Axiom
    ConsStmtListNode(stmts, _, tail)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInStmts(var, tail) = sigma
    ;
Axiom
    ConsArgListNode(al, _, _, tail)
    & sigma = VarTypeInArgList(var, al)
    =>
    VarTypeInArgList(var, tail) = sigma;
Axiom
    ConsExprListNode(exprs, head, tail)
    & sigma = VarTypeInExprs(var, exprs)
    =>
    VarTypeInExpr(var, head) = sigma
    & VarTypeInExprs(var, tail) = sigma
    ;

// ## Propagating variables through nodes
//
// If a variable is in scope before some node n, then it is usually also in scope at all nodes that
// make up n.

// ### Propagating into function bodies
//
// Apart from the variables propagated from outside of the scope of a function literal (which will
// be propagated later), the variables accessible in a function body are as follows:
// 1. The variables defined in the ambient scope of the function definition.
// 2. The name of the function (for recursive calls).
// 3. Function arguments.
//
// We propagate 1 and 2 into 3, and 3 into the function body.

// Propagate ambient variables into arg lists.
Axiom
    Function(func, _, args, _, _)
    & sigma = VarTypeInFunction(var, func)
    =>
    VarTypeInArgList(var, args) = sigma
    ;

// By the "end" of a node list l we mean the unique nil node from which l can be obtained by
// repeated consing. We need access to the end of an ArgListNode so that we know the full set of
// variables introduced in that arg list.
Pred ArgListEnd : ArgListNode * ArgListNode;
Axiom NilArgListNode(arg_list) => ArgListEnd(arg_list, arg_list);
Axiom
    ConsArgListNode(arg_list, _, _, tail)
    & ArgListEnd(tail, end)
    =>
    ArgListEnd(arg_list, end)
    ;

// Propagate variables from the arg list into the body.
Axiom
    Function(_, _, args, _, body)
    & ArgListEnd(args, args_end)
    & sigma = VarTypeInArgList(var, args_end)
    =>
    VarTypeInStmts(var, body) = sigma
    ;

// ### Propagating variables through statements

// If a variable is in scope in the statement that defines a function, then the variable is also in
// scope of the ArgListNode of that function (which then means that it is in scope for the body).
Axiom
    ConsStmtListNode(stmts, head, _)
    & FunctionStmtNode(head, func)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInFunction(var, func) = sigma
    ;

// Propagate variables through if statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & IfStmtNode(head, cond, true_branch, false_branch)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, cond) = sigma
    & VarTypeInStmts(var, true_branch) = sigma
    & VarTypeInStmts(var, false_branch) = sigma
    ;

// Propagate variables through while statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & WhileStmtNode(head, cond, body)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInStmts(var, body) = sigma
    & VarTypeInExpr(var, cond) = sigma
    ;

// Propagate variables through expression statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & ExprStmtNode(head, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// Propagate previously defined variables through let statements into initializer expressions.
Axiom
    ConsStmtListNode(stmts, head, _)
    & LetStmtNode(head, _, _, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// Propagate variables through return statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & ReturnStmtNode(head, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// ### Propagating variables through expressions

// Propagate variables through equality expressions.
Axiom
    EqualsExprNode(expr, lhs, rhs)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInExpr(var, lhs) = sigma
    & VarTypeInExpr(var, rhs) = sigma
    ;

// Propagate variables through function application expressions.
Axiom
    AppExprNode(expr, func, args)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInExpr(var, func) = sigma
    & VarTypeInExprs(var, args) = sigma
    ;

// Propagate variables through function expression.
Axiom
    FunctionExprNode(expr, func)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInFunction(var, func) = sigma
    ;

// # Expression typing.
//
// Declared earlier:
//
//   Func ExprType : ExprNode -> Type;
//   Func ExprTypes : ExprListNode -> TypeList;

// The instances associated to expressions with PolyTypes that must be instantiated into
// MonoTypes.
Func ExprInstantiation : ExprNode -> Instantiation;

// Both ExprType and ExprTypes are total. Our axioms enforce that ExprTypes is given by mapping
// ExprType on each ExprNode element.

Axiom
    NilExprListNode(exprs)
    & ntl = NilTypeList()
    =>
    ExprTypes(exprs) = ntl
    ;
Axiom
    ConsExprListNode(exprs, head, tail)
    & tys = ExprTypes(exprs)
    & head_ty = ExprType(head)
    & tail_tys = ExprTypes(tail)
    =>
    ConsTypeList(head_ty, tail_tys) = tys
    ;

// ## Typing constraints from usage of expressions in statements.
Axiom
    IfStmtNode(_, cond, _, _)
    & et = ExprType(cond)
    =>
    et = BooleanType()
    ;
Axiom
    WhileStmtNode(_, cond, _)
    & et = ExprType(cond)
    =>
    et = BooleanType()
    ;

// ## Typing constraints of expression from usages in other expression.
Axiom VariableExprNode(expr, var) & VarTypeInExpr(var, expr) = MonoType(sigma) => ExprType(expr) = sigma;

Axiom
    VariableExprNode(expr, var)
    & VarTypeInExpr(var, expr) = PolyType(_)
    =>
    ExprInstantiation(expr)!
    ;
Axiom
    VariableExprNode(expr, var)
    & VarTypeInExpr(var, expr) = PolyType(_)
    & instance = ExprInstantiation(expr)
    & ctx = ExprTypeContext(expr)
    =>
    InstantiationTarget(instance) = ctx
    ;
Axiom
    VariableExprNode(expr, var)
    & VarTypeInExpr(var, expr) = PolyType(sigma)
    & instance = ExprInstantiation(expr)
    & expr_ty = ExprType(expr)
    =>
    Instantiate(instance, sigma) = expr_ty
    ;

Axiom VoidExprNode(expr) & et = ExprType(expr) => et = VoidType();
Axiom FalseExprNode(expr) & et = ExprType(expr) => et = BooleanType();
Axiom TrueExprNode(expr) & et = ExprType(expr) => et = BooleanType();
Axiom StringLiteralExprNode(expr, _) & et = ExprType(expr) => et = StringType();
Axiom NumberLiteralExprNode(expr, _) & et = ExprType(expr) => et = NumberType();

Axiom
    EqualsExprNode(eq, lhs, rhs)
    & eq_type = ExprType(eq)
    & lhs_type = ExprType(lhs)
    & rhs_type = ExprType(rhs)
    =>
    eq_type = BooleanType()
    & lhs_type = rhs_type
    ;
  

// The conclusions of these axioms assert that DomainTypes or CodomainType are defined on some
// types tau. By the axioms relating these functions to FunctionType, this means that such types
// tau must be function types.
Axiom
    AppExprNode(expr, func, args)
    & res_ty = ExprType(expr)
    & func_ty = ExprType(func)
    & arg_tys = ExprTypes(args)
    =>
    arg_tys = DomainTypes(func_ty)
    & res_ty = CodomainType(func_ty)
    ;

// No need to instantiate the type of a function expression: Since it would be instantiated only
// once anyway, we can directly equate the function node type with the expression type.
Axiom
    FunctionExprNode(expr, func)
    & func_ty = FunctionNodeType(func)
    =>
    ExprType(expr) = func_ty
    ;

// # Type analysis of function definitions
//
// ## Reachability
//
// To detect whether a function has an implicit `return ();` in the end, we need to decide whether
// the execution flow can reach the end of the function. Obviously this is undecidable in the
// general case. Our type system will thus consider all possible paths through branches of function
// body possible independently of which values expressions can assume. For example, in the function
// 
//   function foo () {
//     if (true) {
//       ...
//     } else {
//       ...
//     }
//   }
//
// we will consider the `else` branch potentially reachable.

// CanProceedStmt(stmt) is true if execution can flow past this statement. CanProceedStmts(stmts)
// is true if CanProceed holds for all statements in stmts.
Pred CanProceedStmt : StmtNode;
Pred CanProceedStmts : StmtListNode;

Axiom NilStmtListNode(stmts) => CanProceedStmts(stmts);
Axiom
    ConsStmtListNode(stmts, head, tail)
    & CanProceedStmt(head)
    & CanProceedStmts(tail)
    =>
    CanProceedStmts(stmts);

Axiom ExprStmtNode(stmt, _) => CanProceedStmt(stmt);
Axiom LetStmtNode(stmt, _, _, _) => CanProceedStmt(stmt);
// ReturnStmtNode does not proceed.
// ReturnVoidStmtNode does not proceed.
Axiom FunctionStmtNode(stmt, _) => CanProceedStmt(stmt);
// An IfStmtNode can proceed if at least one of the two branches can proceed.
Axiom IfStmtNode(stmt, _, true_branch, _) & CanProceedStmts(true_branch) => CanProceedStmt(stmt);
Axiom IfStmtNode(stmt, _, _, false_branch) & CanProceedStmts(false_branch) => CanProceedStmt(stmt);
Axiom WhileStmtNode(stmt, _, _) => CanProceedStmt(stmt);

// ## Explicit return type analysis
//
// Here we analyze which types the expression in explicit return statements among a list of
// statements have. The list of statements need not be the full body of a function, so we only care
// about explicit returns, not the possible implicit `return ();` at the end of a function.
// However, every list of statements can at most return expressions of a single type, so we can
// model `ReturnsType` as a partial function.
Func ReturnsType : StmtListNode -> Type;

// If there is any suffix of a statement list that can return a given type, then the full list can
// return that type.
Axiom ConsStmtListNode(stmts, _, tail) & rt = ReturnsType(tail) => rt = ReturnsType(stmts);

// Base cases for return statements with and without (i.e. void) expressions.
Axiom
    ConsStmtListNode(stmts, head, _)
    & ReturnStmtNode(head, return_value)
    & et = ExprType(return_value)
    =>
    ReturnsType(stmts) = et
    ;

Axiom ReturnVoidStmtNode(_) => VoidType()!;
Axiom
    ConsStmtListNode(stmts, head, _)
    & ReturnVoidStmtNode(head)
    & vt = VoidType()
    =>
    & ReturnsType(stmts) = vt;

// An if statement can return a type if at least one of its two branches returns that type.
Axiom
    ConsStmtListNode(stmts, head, _)
    & IfStmtNode(head, _, true_branch, _)
    & rt = ReturnsType(true_branch)
    =>
    ReturnsType(stmts) = rt
    ;
Axiom
    ConsStmtListNode(stmts, head, _)
    & IfStmtNode(head, _, _, false_branch)
    & rt = ReturnsType(false_branch)
    =>
    ReturnsType(stmts) = rt
    ;

// A while statement can return a type if its body can return that type.
Axiom
    ConsStmtListNode(stmts, head, _)
    & WhileStmtNode(head, _, body)
    & rt = ReturnsType(body)
    =>
    ReturnsType(stmts) = rt
    ;

// ## Tying it together.

// Declared earlier:
// FunctionNodeType : FunctionNode -> Type

// FunctionNodeType is always a function type.
Axiom ft = FunctionNodeType(_) => & DomainTypes(ft)! & CodomainType(ft)!;

// Typing constraints due to the types of function variables. Note that the types of argument
// variables as given by VarInArgListNode were previously unified with the optional type annotation (an
// opaque Type element if no annotation was given), which in turn were unified with the types
// appearing in SemanticArgTypes.
Axiom
    Function(func, _, args, _, _)
    & dom = DomainTypes(FunctionNodeType(func))
    =>
    SemanticArgTypes(args) = dom
    ;

// Typing constraints due to an explicit codomain annotation.
Axiom
    Function(func, _, _, cod, _)
    & ft = FunctionNodeType(func)
    & sot = SemanticOptType(cod)
    =>
    CodomainType(ft) = sot
    ;

// Typing constraints due to explicit return statements.
Axiom
    Function(func, _, _, _, body)
    & ft = FunctionNodeType(func)
    & rt = ReturnsType(body)
    =>
    rt = CodomainType(ft)
    ;

// An implicit Void return type in case we cannot infer that the function body must
// always reach an explicit return statement.
Axiom
    Function(func, _, _, _, body)
    & CanProceedStmts(body)
    & cod = CodomainType(FunctionNodeType(func))
    =>
    cod = VoidType()
    ;
