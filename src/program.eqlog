Pred Absurd: ();

// # The AST, encoded algebraically/relationally.
Sort TypeNode;
Sort TypeNodeOpt;

Sort ExprNode;
Sort ExprNodeList;

Sort StmtNode;
Sort StmtNodeList;

Sort FunctionNode;

Sort Var;
Sort StringLiteral;
Sort NumberLiteral;

Sort ArgList;

Pred VoidTypeNode : TypeNode;
Pred BooleanTypeNode : TypeNode;
Pred NumberTypeNode : TypeNode;
Pred StringTypeNode : TypeNode;
// FunctionTypeNode(node, domain, codomain)
Pred FunctionTypeNode : TypeNode * ArgList * TypeNode;

Pred VariableExprNode : ExprNode * Var;
Pred VoidExprNode : ExprNode;
Pred FalseExprNode : ExprNode;
Pred TrueExprNode : ExprNode;
Pred StringLiteralExprNode : ExprNode * StringLiteral;
Pred NumberLiteralExprNode : ExprNode * NumberLiteral;
// AppExprNode(node, func, args)
Pred AppExprNode : ExprNode * ExprNode * ExprNodeList;
Pred FunctionExprNode : ExprNode * FunctionNode;

Pred ExprStmtNode : StmtNode * ExprNode;
// LetStmtNode(node, var, initial_value)
Pred LetStmtNode : StmtNode * Var * ExprNode;
// ReturnStmtNode(node, return_value)
Pred ReturnStmtNode : StmtNode * ExprNode;
Pred ReturnVoidStmtNode : StmtNode;
Pred FunctionStmtNode : StmtNode * FunctionNode;
// IfStmtNode(node, condition, true_branch, false_branch)
Pred IfStmtNode : StmtNode * ExprNode * StmtNodeList * StmtNodeList;
// WhileStmtNode(node, condition, body)
Pred WhileStmtNode : StmtNode * ExprNode * StmtNodeList;

// Function(node, function_name, domain, codomain, body)
Pred Function : FunctionNode * Var * ArgList * TypeNodeOpt * StmtNodeList;

// ## <Sort>NodeList operators.
Pred NilExprNodeList : ExprNodeList;
Func ConsExprNodeList : ExprNode * ExprNodeList -> ExprNodeList;

Pred NilStmtNodeList : StmtNodeList;
Func ConsStmtNodeList : StmtNode * StmtNodeList -> StmtNodeList;

// ## TypeNodeOpt operators.
Func NoneTypeNodeOpt : TypeNodeOpt;
Func SomeTypeNodeOpt : TypeNode -> TypeNodeOpt;

// ## ArgList operators.
Pred NilArgList : ArgList;
Func ConsArgList : Var * TypeNodeOpt * ArgList -> ArgList;


// # Semantic types.
Sort Type;
Sort TypeList;

// ## Semantic type operators.
Func VoidType : Type;
Func BooleanType : Type;
Func NumberType : Type;
Func StringType : Type;
// FunctionType(node, domain, codomain)
Func FunctionType : TypeList * Type -> Type;

// ## TypeList operators.
// We're equating TypeList elements sometimes. In well-typed programs, this is only possible if the
// type lists have the same length and are made up of the same Types.
Func NilTypeList : TypeList;
Func ConsTypeList : Type * TypeList -> TypeList;
Axiom NilTypeList() = ConsTypeList(_, _) => Absurd();
Axiom ConsTypeList(head_0, tail_0) = ConsTypeList(head_1, tail_1) => head_0 = head_1 & tail_0 = tail_1;

// ## Functions assigning to node elements their corresponding semantic Type elements.
Func SemanticType : TypeNode -> Type;
Func SemanticTypeOpt : TypeNodeOpt -> Type;
Func SemanticArgTypes : ArgList -> TypeList;

Axiom VoidTypeNode(tn) => VoidType()! & SemanticType(tn) = VoidType();
Axiom BooleanTypeNode(tn) => BooleanType()! & SemanticType(tn) = BooleanType();
Axiom NumberTypeNode(tn) => NumberType()! & SemanticType(tn) = NumberType();
Axiom StringTypeNode(tn) => StringType()! & SemanticType(tn) = StringType();
Axiom
    FunctionTypeNode(tn, args, codomain)
    & domain_types = SemanticArgTypes(args)
    & codomain_type = SemanticType(codomain)
    =>
    FunctionType(domain_types, codomain_type)!
    & SemanticType(tn) = FunctionType(domain_types, codomain_type);

// SemanticTypeOpt is always defined, but only for SomeTypeNodeOpt elements do they have a
// determined type.
Axiom tno : TypeNodeOpt => SemanticTypeOpt(tno)!;
Axiom SemanticTypeOpt(SomeTypeNodeOpt(tn)) ~> SemanticType(tn);

Axiom NilArgList(al) => NilTypeList()! & SemanticArgTypes(al) = NilTypeList();
Axiom
    al = ConsArgList(_, head, tail)
    & head_type = SemanticTypeOpt(head)
    & tail_types = SemanticArgTypes(tail)
    =>
    ConsTypeList(head_type, tail_types)!
    & SemanticArgTypes(al) = ConsTypeList(head_type, tail_types)
    ;

// # Variable resolution.
//
// VarTypeInStmt(var, stmt) is defined iff `var` is in scope before `stmt` (so not for a `let`
// statement introducing the variable), and similarly for the other functions.
Func VarTypeInStmts : Var * StmtNodeList -> Type;
Func VarTypeInArgList : Var * ArgList -> Type;
Func VarTypeInExpr : Var * ExprNode -> Type;
Func VarTypeInExprs : Var * ExprNodeList -> Type;

// If a variable is in scope for some statement `head`, then also for all statements `tail` after
// it statement.
Axiom VarTypeInStmts(var, ConsStmtNodeList(_, tail)) = sigma => VarTypeInStmts(var, tail) = sigma;

// A variable is in scope after a `let` statement introducing the variable.
Axiom ConsStmtNodeList(head, tail)! & LetStmtNode(head, var, _) => VarTypeInStmts(var, tail)!;
// It is an error if a variable is already in scope for a `let` statement that introduces the
// variable.
Axiom LetStmtNode(head, var, _) & VarTypeInStmts(var, ConsStmtNodeList(head, _))! => Absurd();

// Same as the previous two axioms concerning `LetStmtNode` and `VarTypeInStmts`, but for
// `FunctionStmtNode`.
Axiom
    ConsStmtNodeList(head, tail)!
    & FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    =>
    VarTypeInStmts(var, tail)!
    ;
Axiom
    FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & VarTypeInStmts(var, ConsStmtNodeList(head, _))!
    =>
    Absurd()
    ;

// `VarTypeInArgList` behaves similarly to `VarTypeInStmts` for a list of `let` statements.
Axiom VarTypeInArgList(var, ConsArgList(_, _, tail)) = sigma => VarTypeInArgList(var, tail) = sigma;
Axiom VarTypeInArgList(var, ConsArgList(var, opt_type_node, tail))! => VarTypeInArgList(var, tail) ~> SemanticTypeOpt(opt_type_node);

// An argument of a function is in scope of the body of the function.
Axiom Function(_, _, args, _, body) & VarTypeInArgList(var, args) = sigma => VarTypeInStmts(var, body) = sigma;

// If a variable is in scope in the statement that defines a function, then the variable is also in
// scope in the function.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & FunctionStmtNode(head, func)
    & Function(func, _, _, _ ,body)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInStmts(var, body) = sigma
    ;

// Variables are in scope in the two branches of an if statement.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & IfStmtNode(head, _, true_branch, false_branch)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInStmts(var, true_branch) = sigma
    & VarTypeInStmts(var, false_branch) = sigma
    ;

// Variables are in scope in the body of a while statement.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & WhileStmtNode(head, _, body)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInStmts(var, body) = sigma
    ;

// Propagate variables into expressions occuring in statements.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & ExprStmtNode(head, expr)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, expr) = sigma
    ;
Axiom
    stmts = ConsStmtNodeList(head, _)
    & LetStmtNode(head, _, expr)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, expr) = sigma
    ;
Axiom
    stmts = ConsStmtNodeList(head, _)
    & ReturnStmtNode(head, expr)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, expr) = sigma
    ;
Axiom
    stmts = ConsStmtNodeList(head, _)
    & IfStmtNode(head, cond, _, _)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, cond) = sigma
    ;
Axiom
    stmts = ConsStmtNodeList(head, _)
    & WhileStmtNode(head, cond, _)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, cond) = sigma
    ;

// Propagate variable bindings through expressions.
Axiom
    VarTypeInExprs(var, ConsExprNodeList(head, tail)) = sigma
    => 
    VarTypeInExpr(var, head) = sigma
    & VarTypeInExprs(var, tail) = sigma
    ;
Axiom
    AppExprNode(expr, func, args)
    & VarTypeInExpr(var, expr) = sigma
    => 
    VarTypeInExpr(var, func) = sigma
    & VarTypeInExprs(var, args) = sigma
    ;
Axiom
    FunctionExprNode(expr, func)
    & Function(func, _, _, _ ,body)
    & VarTypeInExpr(var, expr) = sigma
    => 
    VarTypeInStmts(var, body) = sigma
    ;
