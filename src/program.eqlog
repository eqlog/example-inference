Pred VariableShadowing: ();
Pred ConflictingTypes: ();

// # The AST, encoded algebraically/relationally.
Sort ModuleNode;

Sort TypeNode;
Sort OptTypeNode;

Sort ExprNode;
Sort ExprListNode;

Sort StmtNode;
Sort StmtListNode;

Sort FunctionNode;

Sort Var;
Sort StringLiteral;
Sort NumberLiteral;

Sort ArgListNode;

// Module(node, top_lvl_stmts)
Pred Module : ModuleNode * StmtListNode;

Pred VoidTypeNode : TypeNode;
Pred BooleanTypeNode : TypeNode;
Pred NumberTypeNode : TypeNode;
Pred StringTypeNode : TypeNode;
// FunctionTypeNode(node, domain, codomain)
Pred FunctionTypeNode : TypeNode * ArgListNode * TypeNode;

Pred VariableExprNode : ExprNode * Var;
Pred VoidExprNode : ExprNode;
Pred FalseExprNode : ExprNode;
Pred TrueExprNode : ExprNode;
Pred StringLiteralExprNode : ExprNode * StringLiteral;
Pred NumberLiteralExprNode : ExprNode * NumberLiteral;
Pred EqualsExprNode : ExprNode * ExprNode * ExprNode;
// AppExprNode(node, func, args)
Pred AppExprNode : ExprNode * ExprNode * ExprListNode;
Pred FunctionExprNode : ExprNode * FunctionNode;

Pred ExprStmtNode : StmtNode * ExprNode;
// LetStmtNode(node, var, initial_value)
Pred LetStmtNode : StmtNode * Var * OptTypeNode * ExprNode;
// ReturnStmtNode(node, return_value)
Pred ReturnStmtNode : StmtNode * ExprNode;
Pred ReturnVoidStmtNode : StmtNode;
Pred FunctionStmtNode : StmtNode * FunctionNode;
// IfStmtNode(node, condition, true_branch, false_branch)
Pred IfStmtNode : StmtNode * ExprNode * StmtListNode * StmtListNode;
// WhileStmtNode(node, condition, body)
Pred WhileStmtNode : StmtNode * ExprNode * StmtListNode;

// Function(node, function_name, domain, codomain, body)
Pred Function : FunctionNode * Var * ArgListNode * OptTypeNode * StmtListNode;

// ## <Sort>NodeList operators.
Pred NilExprListNode : ExprListNode;
Pred ConsExprListNode : ExprListNode * ExprNode * ExprListNode;

Pred NilStmtListNode : StmtListNode;
Pred ConsStmtListNode : StmtListNode * StmtNode * StmtListNode;

// ## ArgListNode operators.
Pred NilArgListNode : ArgListNode;
Pred ConsArgListNode : ArgListNode * Var * OptTypeNode * ArgListNode;

// ## OptTypeNode operators.
Pred NoneOptTypeNode : OptTypeNode;
Pred SomeOptTypeNode : OptTypeNode * TypeNode;


// # Semantic types.
Sort Type;
Sort TypeList;

// ## Semantic type operators.
Func VoidType : Type;
Func BooleanType : Type;
Func NumberType : Type;
Func StringType : Type;
// FunctionType(node, domain, codomain)
Func FunctionType : TypeList * Type -> Type;
// Inverses to FunctionType:
// - DomainTypes(FunctionType(domain, _)) = domain
// - CodomainType(FunctionType(_, codomain)) = codomain
Func DomainTypes : Type -> TypeList;
Func CodomainType : Type -> Type;

Axiom DomainTypes(tau)! => CodomainType(tau)!;
Axiom CodomainType(tau)! => DomainTypes(tau)!;
Axiom
    kappa = FunctionType(sigmas, tau)
    =>
    DomainTypes(kappa) = sigmas
    & CodomainType(kappa) = tau
    ;
Axiom
    sigmas = DomainTypes(kappa)
    & tau = CodomainType(kappa)
    =>
    FunctionType(sigmas, tau) = kappa
    ;

// ## TypeList operators.
// We're equating TypeList elements sometimes. In well-typed programs, this is only possible if the
// type lists have the same length and are made up of the same Types.
Func NilTypeList : TypeList;
Func ConsTypeList : Type * TypeList -> TypeList;
Axiom NilTypeList() = ConsTypeList(_, _) => ConflictingTypes();
Axiom ConsTypeList(head_0, tail_0) = ConsTypeList(head_1, tail_1) => head_0 = head_1 & tail_0 = tail_1;

// ## Joint injectivity of type operators.
Axiom VoidType() = BooleanType() => ConflictingTypes();
Axiom VoidType() = NumberType() => ConflictingTypes();
Axiom VoidType() = StringType() => ConflictingTypes();
Axiom VoidType() = FunctionType(_, _) => ConflictingTypes();

Axiom BooleanType() = NumberType() => ConflictingTypes();
Axiom BooleanType() = StringType() => ConflictingTypes();
Axiom BooleanType() = FunctionType(_, _) => ConflictingTypes();

Axiom NumberType() = StringType() => ConflictingTypes();
Axiom NumberType() = FunctionType(_, _) => ConflictingTypes();

Axiom StringType() = FunctionType(_, _) => ConflictingTypes();

Axiom
    FunctionType(domain_0, codomain_0) = FunctionType(domain_1, codomain_1)
    =>
    domain_0 = domain_1
    & codomain_0 = codomain_1
    ;

// ## Functions assigning to node elements their corresponding semantic Type elements.
Func SemanticType : TypeNode -> Type;
Func SemanticOptType : OptTypeNode -> Type;
Func SemanticArgTypes : ArgListNode -> TypeList;

// The types of expressions and function literals:
Func ExprType : ExprNode -> Type;
Func ExprTypes : ExprListNode -> TypeList;
Func FunctionNodeType : FunctionNode -> Type;

// All of the functions into Type that we've just declared are total.
Axiom tn: TypeNode => SemanticType(tn)!;
Axiom otn: OptTypeNode => SemanticOptType(otn)!;
Axiom agn: ArgListNode => SemanticArgTypes(agn)!;
Axiom en: ExprNode => ExprType(en)!;
Axiom eln: ExprListNode => ExprTypes(eln)!;
Axiom fcn: FunctionNode => FunctionNodeType(fcn)!;

// Since SemanticType is total, these rules will fire for all TypeNodes.
Axiom
    VoidTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    VoidType() = sigma
    ;
Axiom
    BooleanTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    BooleanType() = sigma
    ;
Axiom
    NumberTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    NumberType() = sigma
    ;
Axiom
    StringTypeNode(tn)
    & sigma = SemanticType(tn)
    =>
    StringType() = sigma
    ;

// Other axioms assert that SemanticArgTypes and SemanticType are total functions, so this rule
// will fire for al FunctionTypeNodes.
Axiom
    FunctionTypeNode(tn, args, codomain)
    & dom_types = SemanticArgTypes(args)
    & cod_type = SemanticType(codomain)
    & function_type = SemanticType(tn)
    =>
    FunctionType(dom_types, cod_type) = function_type
    ;

// SemanticOptType is total, but only for SomeOptTypeNode elements does it have a determined type.
// If no other rules apply, it will be an opaque Type element determined only by the OptTypeNode
// element.
Axiom
    SomeOptTypeNode(otn, tn)
    & sigma = SemanticType(tn)
    =>
    SemanticOptType(otn) = sigma
    ;

Axiom
    NilArgListNode(al)
    & semantic_types = SemanticArgTypes(al)
    =>
    NilTypeList() = semantic_types
    ;
Axiom
    ConsArgListNode(al, _, head_type, tail)
    & semantic_head = SemanticOptType(head_type)
    & semantic_tail = SemanticArgTypes(tail)
    & semantic_types = SemanticArgTypes(al)
    =>
    semantic_types = ConsTypeList(semantic_head, semantic_tail)
    ;


// # Variable resolution.

// For each node kind X in which variables matter, we introduce a function
//
//   VarTypeInX : Var * X -> Type
//
// and add axioms such that VarTypeInX(var, n) = sigma holds iff var is considered to be in scope
// for node n and has type sigma. That var must be in scope for n means that var must have been
// introduced *before* n; it is not sufficient for n to introduce the variable.
//
// For X = StmtListNode and X = ArgListNode, note that if n = ConsX(head, tail), then head appears
// before tail in source code. For example, if body is the StmtListNode representing the body of a
// function, then none of the variables introduced in the body will be in scope for body. Instead,
// all of those variables are in scope at the NilStmtListNode of body. Similarly, if args is the
// ArgListNode of a function definition, then the variables listed in args are only in scope for the
// NilArgListNode at the end of args.
Func VarTypeInStmts : Var * StmtListNode -> Type;
Func VarTypeInFunction : Var * FunctionNode -> Type;
Func VarTypeInArgList : Var * ArgListNode -> Type;
Func VarTypeInExpr : Var * ExprNode -> Type;
Func VarTypeInExprs : Var * ExprListNode -> Type;

// ## Base cases: Nodes that introduce variables

// Every let statements introduces a variable.
Axiom
    ConsStmtListNode(_, head, tail)
    & LetStmtNode(head, var, ty_annot, _)
    & ty = SemanticOptType(ty_annot)
    =>
    VarTypeInStmts(var, tail) = ty
    ;

// Every function statement introduces a variable for statements occuring after the function
// statement.
Axiom
    ConsStmtListNode(_, head, tail)
    & FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & ty = FunctionNodeType(func)
    =>
    VarTypeInStmts(var, tail) = ty
    ;

// Every function node introduces the name of the function in the ArgListNode of the function (and
// hence, by the propagation axioms below, also in the body of the function).
Axiom
    Function(func, var, arg, _ ,_)
    & ty = FunctionNodeType(func)
    =>
    VarTypeInArgList(var, arg) = ty
    ;

// Every function argument introduces a variable.
Axiom
    ConsArgListNode(_, var, ty_annot, tail)
    & ty = SemanticOptType(ty_annot)
    =>
    VarTypeInArgList(var, tail) = ty
    ;

// ## Errors due to multiple introductions of the same variable
//
// For each base node case that introduces a variable, it is an error if the variable is already in
// scope before the node.

Axiom
    ConsStmtListNode(stmts, head, _)
    & LetStmtNode(head, var, _, _)
    & VarTypeInStmts(var, stmts)!
    =>
    VariableShadowing();
Axiom
    FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & VarTypeInStmts(var, stmts)!
    & ConsStmtListNode(stmts, head, _)
    =>
    VariableShadowing()
    ;
Axiom
    Function(func, var, _, _, _)
    & VarTypeInFunction(var, func)!
    =>
    VariableShadowing()
    ;
Axiom
    ConsArgListNode(al, var, _, _)
    & VarTypeInArgList(var, al)!
    =>
    VariableShadowing()
    ;

// ## Propagation of variables through lists
//
// If a variable is in scope for ConsX(head, tail), then it should also be in scope for tail.

Axiom
    ConsStmtListNode(stmts, _, tail)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInStmts(var, tail) = sigma
    ;
Axiom
    ConsArgListNode(al, _, _, tail)
    & sigma = VarTypeInArgList(var, al)
    =>
    VarTypeInArgList(var, tail) = sigma;
Axiom
    ConsExprListNode(exprs, head, tail)
    & sigma = VarTypeInExprs(var, exprs)
    =>
    VarTypeInExpr(var, head) = sigma
    & VarTypeInExprs(var, tail) = sigma
    ;

// ## Propagating variables through nodes
//
// If a variable is in scope before some node n, then it is usually also in scope at all nodes that
// make up n.

// ### Propagating into function bodies
//
// Apart from the variables propagated from outside of the scope of a function literal (which will
// be propagated later), the variables accessible in a function body are as follows:
// 1. The variables defined in the ambient scope of the function definition.
// 2. The name of the function (for recursive calls).
// 3. Function arguments.
//
// We propagate 1 and 2 into 3, and 3 into the function body.

// Propagate ambient variables into arg lists.
Axiom
    Function(func, _, args, _, _)
    & sigma = VarTypeInFunction(var, func)
    =>
    VarTypeInArgList(var, args) = sigma
    ;

// Propagate function names into arg lists.
Axiom
    Function(_, var, args, _, _)
    =>
    VarTypeInArgList(var, args)!
    ;

// By the "end" of a node list l we mean the unique nil node from which l can be obtained by
// repeated consing. We need access to the end of an ArgListNode so that we know the full set of
// variables introduced in that arg list.
Pred ArgListEnd : ArgListNode * ArgListNode;
Axiom NilArgListNode(arg_list) => ArgListEnd(arg_list, arg_list);
Axiom
    ConsArgListNode(arg_list, _, _, tail)
    & ArgListEnd(tail, end)
    =>
    ArgListEnd(arg_list, end)
    ;

// Propagate variables from the arg list into the body.
Axiom
    Function(_, _, args, _, body)
    & ArgListEnd(args, args_end)
    & sigma = VarTypeInArgList(var, args_end)
    =>
    VarTypeInStmts(var, body) = sigma
    ;

// ### Propagating variables through statements

// If a variable is in scope in the statement that defines a function, then the variable is also in
// scope of the ArgListNode of that function (which then means that it is in scope for the body).
Axiom
    ConsStmtListNode(stmts, head, _)
    & FunctionStmtNode(head, func)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInFunction(var, func) = sigma
    ;

// Propagate variables through if statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & IfStmtNode(head, cond, true_branch, false_branch)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, cond) = sigma
    & VarTypeInStmts(var, true_branch) = sigma
    & VarTypeInStmts(var, false_branch) = sigma
    ;

// Propagate variables through while statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & WhileStmtNode(head, cond, body)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInStmts(var, body) = sigma
    & VarTypeInExpr(var, cond) = sigma
    ;

// Propagate variables through expression statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & ExprStmtNode(head, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// Propagate previously defined variables through let statements into initializer expressions.
Axiom
    ConsStmtListNode(stmts, head, _)
    & LetStmtNode(head, _, _, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// Propagate variables through return statements.
Axiom
    ConsStmtListNode(stmts, head, _)
    & ReturnStmtNode(head, expr)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInExpr(var, expr) = sigma
    ;

// ### Propagating variables through expressions

// Propagate variables through equality expressions.
Axiom
    EqualsExprNode(expr, lhs, rhs)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInExpr(var, lhs) = sigma
    & VarTypeInExpr(var, rhs) = sigma
    ;

// Propagate variables through function application expressions.
Axiom
    AppExprNode(expr, func, args)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInExpr(var, func) = sigma
    & VarTypeInExprs(var, args) = sigma
    ;

// Propagate variables through function expression.
Axiom
    FunctionExprNode(expr, func)
    & sigma = VarTypeInExpr(var, expr)
    =>
    VarTypeInFunction(var, func) = sigma
    ;
