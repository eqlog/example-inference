Pred ConflictingTypes: ();
Pred ConflictingVariables: ();

// # The AST, encoded algebraically/relationally.
Sort ModuleNode;

Sort TypeNode;
Sort OptTypeNode;

Sort ExprNode;
Sort ExprListNode;

Sort StmtNode;
Sort StmtListNode;

Sort FunctionNode;

Sort Var;
Sort StringLiteral;
Sort NumberLiteral;

Sort ArgListNode;

// Module(node, top_lvl_stmts)
Pred Module : ModuleNode * StmtListNode;

Pred VoidTypeNode : TypeNode;
Pred BooleanTypeNode : TypeNode;
Pred NumberTypeNode : TypeNode;
Pred StringTypeNode : TypeNode;
// FunctionTypeNode(node, domain, codomain)
Pred FunctionTypeNode : TypeNode * ArgListNode * TypeNode;

Pred VariableExprNode : ExprNode * Var;
Pred VoidExprNode : ExprNode;
Pred FalseExprNode : ExprNode;
Pred TrueExprNode : ExprNode;
Pred StringLiteralExprNode : ExprNode * StringLiteral;
Pred NumberLiteralExprNode : ExprNode * NumberLiteral;
// AppExprNode(node, func, args)
Pred AppExprNode : ExprNode * ExprNode * ExprListNode;
Pred FunctionExprNode : ExprNode * FunctionNode;

Pred ExprStmtNode : StmtNode * ExprNode;
// LetStmtNode(node, var, initial_value)
Pred LetStmtNode : StmtNode * Var * OptTypeNode * ExprNode;
// ReturnStmtNode(node, return_value)
Pred ReturnStmtNode : StmtNode * ExprNode;
Pred ReturnVoidStmtNode : StmtNode;
Pred FunctionStmtNode : StmtNode * FunctionNode;
// IfStmtNode(node, condition, true_branch, false_branch)
Pred IfStmtNode : StmtNode * ExprNode * StmtListNode * StmtListNode;
// WhileStmtNode(node, condition, body)
Pred WhileStmtNode : StmtNode * ExprNode * StmtListNode;

// Function(node, function_name, domain, codomain, body)
Pred Function : FunctionNode * Var * ArgListNode * OptTypeNode * StmtListNode;

// ## <Sort>NodeList operators.
Pred NilExprListNode : ExprListNode;
Pred ConsExprListNode : ExprListNode * ExprNode * ExprListNode;

Pred NilStmtListNode : StmtListNode;
Pred ConsStmtListNode : StmtListNode * StmtNode * StmtListNode;

// ## ArgListNode operators.
Pred NilArgListNode : ArgListNode;
Pred ConsArgListNode : ArgListNode * Var * OptTypeNode * ArgListNode;

// ## OptTypeNode operators.
Pred NoneOptTypeNode : OptTypeNode;
Pred SomeOptTypeNode : OptTypeNode * TypeNode;


// # Semantic types.
Sort Type;
Sort TypeList;

// ## Semantic type operators.
Func VoidType : Type;
Func BooleanType : Type;
Func NumberType : Type;
Func StringType : Type;
// FunctionType(node, domain, codomain)
Func FunctionType : TypeList * Type -> Type;
// Inverses to FunctionType:
// - DomainTypes(FunctionType(domain, _)) = domain
// - CodomainType(FunctionType(_, codomain)) = codomain
Func DomainTypes : Type -> TypeList;
Func CodomainType : Type -> Type;

Axiom DomainTypes(tau)! => CodomainType(tau)!;
Axiom CodomainType(tau)! => DomainTypes(tau)!;
Axiom DomainTypes(FunctionType(domain, _)) ~> domain;
Axiom CodomainType(FunctionType(_, codomain)) ~> codomain;
Axiom FunctionType(DomainTypes(tau), CodomainType(tau)) ~> tau;

// ## TypeList operators.
// We're equating TypeList elements sometimes. In well-typed programs, this is only possible if the
// type lists have the same length and are made up of the same Types.
Func NilTypeList : TypeList;
Func ConsTypeList : Type * TypeList -> TypeList;
Axiom NilTypeList() = ConsTypeList(_, _) => ConflictingTypes();
Axiom ConsTypeList(head_0, tail_0) = ConsTypeList(head_1, tail_1) => head_0 = head_1 & tail_0 = tail_1;

// ## Joint injectivity of type operators.
Axiom VoidType() = BooleanType() => ConflictingTypes();
Axiom VoidType() = NumberType() => ConflictingTypes();
Axiom VoidType() = StringType() => ConflictingTypes();
Axiom VoidType() = FunctionType(_, _) => ConflictingTypes();

Axiom BooleanType() = NumberType() => ConflictingTypes();
Axiom BooleanType() = StringType() => ConflictingTypes();
Axiom BooleanType() = FunctionType(_, _) => ConflictingTypes();

Axiom NumberType() = StringType() => ConflictingTypes();
Axiom NumberType() = FunctionType(_, _) => ConflictingTypes();

Axiom StringType() = FunctionType(_, _) => ConflictingTypes();

Axiom
    FunctionType(domain_0, codomain_0) = FunctionType(domain_1, codomain_1)
    =>
    domain_0 = domain_1
    & codomain_0 = codomain_1
    ;

// ## Functions assigning to node elements their corresponding semantic Type elements.
Func SemanticType : TypeNode -> Type;
Func SemanticOptType : OptTypeNode -> Type;
Func SemanticArgTypes : ArgListNode -> TypeList;

Axiom tn: TypeNode => SemanticType(tn)!;
Axiom tno: OptTypeNode => SemanticOptType(tno)!;
Axiom ag: ArgListNode => SemanticArgTypes(ag)!;

// Since another axiom enforces that SemanticType is total, these rules will fire for all
// TypeNodes.
Axiom VoidTypeNode(tn) => VoidType() ~> SemanticType(tn);
Axiom BooleanTypeNode(tn) => BooleanType() ~> SemanticType(tn);
Axiom NumberTypeNode(tn) => NumberType() ~> SemanticType(tn);
Axiom StringTypeNode(tn) => StringType() ~> SemanticType(tn);
// Other axioms assert that SemanticArgTypes and SemanticType are total functions, so this rule
// will fire for al FunctionTypeNodes.
Axiom
    FunctionTypeNode(tn, args, codomain)
    =>
    FunctionType(SemanticArgTypes(args), SemanticType(codomain))
    ~>
    SemanticType(tn)
    ;

// SemanticOptType is total, but only for SomeOptTypeNode elements does it have a determined type.
// If no other rules apply, it will be an opaque Type element determined only by the OptTypeNode
// element.
Axiom
	  SomeOptTypeNode(tno, tn)
    =>
    SemanticType(tn)
    ~>
		SemanticOptType(tno)
		;

Axiom NilArgListNode(al) => NilTypeList() ~> SemanticArgTypes(al);
Axiom
    ConsArgListNode(al, _, head_type, tail)
    =>
    ConsTypeList(SemanticOptType(head_type), SemanticArgTypes(tail))
    ~>
    SemanticArgTypes(al)
    ;

// ## Determined types, i.e. those that do not contain unsolved type variables.
//
// In well-formed programs, every type should be determined.
//
// Without polymorphism, for example the following program contains an
// undetermined type:
//
//   function foo(x) {}
//
// Here the type of `x` is not determined. Applying the function at least once on an argument with
// determined type will determine the argument type of `foo` though, for example if we add the
// statement `foo(5);`

Pred DeterminedType : Type;
Pred DeterminedTypes : TypeList;

// A type list is determined if all of the types it contains are determined.
Axiom sigmas = NilTypeList() => DeterminedTypes(sigmas);
Axiom
    sigmas = ConsTypeList(head, tail)
    & DeterminedType(head)
    & DeterminedTypes(tail)
    =>
    DeterminedTypes(sigmas)
    ;

Axiom sigma = VoidType() => DeterminedType(sigma);
Axiom sigma = BooleanType() => DeterminedType(sigma);
Axiom sigma = NumberType() => DeterminedType(sigma);
Axiom sigma = StringType() => DeterminedType(sigma);
Axiom
    sigma = FunctionType(dom, cod)
    & DeterminedTypes(dom)
    & DeterminedType(cod)
    =>
    DeterminedType(sigma)
    ;

// # Variable resolution.
//
// For each node kind X in which variables matter, we introduce a partial function
//
//   VarTypeInX : Var * X -> Type
//
// and add axioms such that VarTypeInX(var, n) = sigma iff var is considered to be in scope for
// node n. sigma can be an opaque Type element. That var must be in scope for n means that var must
// have been introduced *before* n; it is not sufficient for n to introduce the variable.
//
// For X = StmtNodeList and X = ArgList, note that if n = ConsX(head, tail), then head appears
// before tail in source code. For example, if body is the StmtNodeList representing the body of a
// function, then none of the variables introduced in the body will be in scope for body. Instead,
// all of those variables are in scope at the NilStmtNodeList of body. Similarly, if args is the
// ArgList of a function definition, then the variables listed in args are only in scope for the
// NilArgList at the root of args.
Func VarTypeInStmts : Var * StmtNodeList -> Type;
Func VarTypeInFunction : Var * FunctionNode -> Type;
Func VarTypeInArgList : Var * ArgList -> Type;
Func VarTypeInExpr : Var * ExprNode -> Type;
Func VarTypeInExprs : Var * ExprNodeList -> Type;

// ## Base cases: Nodes that introduce variables

// Every let statements introduces a variable.
Axiom
    ConsStmtNodeList(_, head, tail)
    & LetStmtNode(head, var, _, _)
    =>
    VarTypeInStmts(var, tail)!
    ;

// Every function statement introduces a variable for statements occuring after the function
// statement.
Axiom
    ConsStmtNodeList(_, head, tail)
    & FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    =>
    VarTypeInStmts(var, tail)!
    ;

// Every function node introduces the name of the function in the ArgList of the function (and
// hence, by the propagation axioms below, also in the body of the function).
Axiom
    Function(_, var, arg, _ ,_)
    =>
    VarTypeInArgList(var, arg)!
    ;

// Every function argument introduces a variable.
Axiom
    ConsArgList(_, var, _, tail)
    =>
    VarTypeInArgList(var, tail)!
    ;

// ## Errors due to multiple introductions of the same variable
//
// For each base node case that introduces a variable, it is an error if the variable is already in
// scope before the node.

Axiom LetStmtNode(head, var, _, _) & VarTypeInStmts(var, stmts)! & ConsStmtNodeList(stmts, head, _) => ConflictingVariables();
Axiom
    FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & VarTypeInStmts(var, stmts)!
		& ConsStmtNodeList(stmts, head, _)
    =>
    ConflictingVariables()
    ;
Axiom Function(func, var, _, _, _) & VarTypeInFunction(var, func)! => ConflictingVariables();
Axiom VarTypeInArgList(var, al)! & ConsArgList(al, var, _, _) => ConflictingVariables();

// ## Propagation of variables through lists
//
// If a variable is in scope for ConsX(head, tail), then it should also be in scope for tail.

Axiom ConsStmtNodeList(stmts, _, tail) => VarTypeInStmts(var, tail) ~> VarTypeInStmts(var, stmts);
Axiom ConsArgList(al, _, _, tail) => VarTypeInArgList(var, tail) ~> VarTypeInArgList(var, al);
Axiom
	VarTypeInExprs(var, exprs) = sigma &
	ConsExprNodeList(exprs, head, tail)
	=>
	VarTypeInExpr(var, head) = sigma
  & VarTypeInExprs(var, tail) = sigma
  ;

// ## Propagating variables through nodes
//
// If a variable is in scope before some node n, then it is usually also in scope at all nodes that
// make up n.

// ### Propagating into function bodies
//
// Apart from the variables propagated from outside of the scope of a function literal (which will
// be propagated later), the variables accessible in a function body are as follows:
// 1. The variables defined in the ambient scope of the function definition.
// 2. The name of the function (for recursive calls).
// 3. Function arguments.
//
// We propagate 1 and 2 into 3, and 3 into the function body.

// Propagate ambient variables into arg lists.
Axiom
    Function(func, _, args, _, _)
    =>
    VarTypeInArgList(var, args)
    ~>
    VarTypeInFunction(var, func)
    ;

// Propagate function names into arg lists.
Axiom
    Function(_, var, args, _, _)
    =>
    VarTypeInArgList(var, args)!
    ;

// By the "root" of a node list l we mean the unique nil node from which l can be obtained by
// repeated consing. We need access to the root of an ArgList so that we know the full set of
// variables introduced in that arg list.

// The axioms are such that RootNilArgList is total if every arg list is Nil or Cons (and not
// opaque).
Func RootNilArgList : ArgList -> ArgList;
Axiom NilArgList(args) => RootNilArgList(args) = args;
Axiom ConsArgList(al, _, _, tail) => RootNilArgList(al) ~> RootNilArgList(tail);

// Propagate variables from the arg list into the body.
Axiom
    Function(_, _, args, _, body)
    =>
    VarTypeInStmts(var, body)
    ~>
    VarTypeInArgList(var, RootNilArgList(args))
    ;

// ### Propagating variables through statements

// If a variable is in scope in the statement that defines a function, then the variable is also in
// scope of the ArgList of that function (which then means that it is in scope for the body).
Axiom
    ConsStmtNodeList(stmts, head, _)
    & FunctionStmtNode(head, func)
    =>
    VarTypeInFunction(var, func)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate variables through if statements.
Axiom
    ConsStmtNodeList(stmts, head, _)
    & IfStmtNode(head, cond, true_branch, false_branch)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, cond) = sigma
    & VarTypeInStmts(var, true_branch) = sigma
    & VarTypeInStmts(var, false_branch) = sigma
    ;

// Propagate variables through while statements.
Axiom
    ConsStmtNodeList(stmts, head, _)
    & WhileStmtNode(head, cond, body)
    & sigma = VarTypeInStmts(var, stmts)
    =>
    VarTypeInStmts(var, body) = sigma
    & VarTypeInExpr(var, cond) = sigma
    ;

// Propagate variables through expression statements.
Axiom
    ConsStmtNodeList(stmts, head, _)
    & ExprStmtNode(head, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate previously defined variables through let statements into initializer expressions.
Axiom
    ConsStmtNodeList(stmts, head, _)
    & LetStmtNode(head, _, _, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate variables through return statements.
Axiom
    ConsStmtNodeList(stmts, head, _)
    & ReturnStmtNode(head, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// ### Propagating variables through expressions

// Propagate variables through function application expressions.
Axiom
    AppExprNode(expr, func, args)
    & VarTypeInExpr(var, expr) = sigma
    =>
    VarTypeInExpr(var, func) = sigma
    & VarTypeInExprs(var, args) = sigma
    ;

// Propagate variables through function expression.
Axiom
    FunctionExprNode(expr, func)
    =>
    VarTypeInFunction(var, func)
    ~>
    VarTypeInExpr(var, expr)
    ;
