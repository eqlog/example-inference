Pred Absurd: ();

// # The AST, encoded algebraically/relationally.
Sort TypeNode;
Sort TypeNodeOpt;

Sort ExprNode;
Sort ExprNodeList;

Sort StmtNode;
Sort StmtNodeList;

Sort FunctionNode;

Sort Var;
Sort StringLiteral;
Sort NumberLiteral;

Sort ArgList;

Pred VoidTypeNode : TypeNode;
Pred BooleanTypeNode : TypeNode;
Pred NumberTypeNode : TypeNode;
Pred StringTypeNode : TypeNode;
// FunctionTypeNode(node, domain, codomain)
Pred FunctionTypeNode : TypeNode * ArgList * TypeNode;

Pred VariableExprNode : ExprNode * Var;
Pred VoidExprNode : ExprNode;
Pred FalseExprNode : ExprNode;
Pred TrueExprNode : ExprNode;
Pred StringLiteralExprNode : ExprNode * StringLiteral;
Pred NumberLiteralExprNode : ExprNode * NumberLiteral;
// AppExprNode(node, func, args)
Pred AppExprNode : ExprNode * ExprNode * ExprNodeList;
Pred FunctionExprNode : ExprNode * FunctionNode;

Pred ExprStmtNode : StmtNode * ExprNode;
// LetStmtNode(node, var, initial_value)
Pred LetStmtNode : StmtNode * Var * ExprNode;
// ReturnStmtNode(node, return_value)
Pred ReturnStmtNode : StmtNode * ExprNode;
Pred ReturnVoidStmtNode : StmtNode;
Pred FunctionStmtNode : StmtNode * FunctionNode;
// IfStmtNode(node, condition, true_branch, false_branch)
Pred IfStmtNode : StmtNode * ExprNode * StmtNodeList * StmtNodeList;
// WhileStmtNode(node, condition, body)
Pred WhileStmtNode : StmtNode * ExprNode * StmtNodeList;

// Function(node, function_name, domain, codomain, body)
Pred Function : FunctionNode * Var * ArgList * TypeNodeOpt * StmtNodeList;

// ## <Sort>NodeList operators.
Pred NilExprNodeList : ExprNodeList;
Func ConsExprNodeList : ExprNode * ExprNodeList -> ExprNodeList;

Pred NilStmtNodeList : StmtNodeList;
Func ConsStmtNodeList : StmtNode * StmtNodeList -> StmtNodeList;

// ## ArgList operators.
Pred NilArgList : ArgList;
Func ConsArgList : Var * TypeNodeOpt * ArgList -> ArgList;

// ## TypeNodeOpt operators.
Pred NoneTypeNodeOpt : TypeNodeOpt;
Func SomeTypeNodeOpt : TypeNode -> TypeNodeOpt;


// # Semantic types.
Sort Type;
Sort TypeList;

// ## Semantic type operators.
Func VoidType : Type;
Func BooleanType : Type;
Func NumberType : Type;
Func StringType : Type;
// FunctionType(node, domain, codomain)
Func FunctionType : TypeList * Type -> Type;
// Inverses to FunctionType:
// - DomainTypes(FunctionType(domain, _)) = domain
// - CodomainType(FunctionType(_, codomain)) = codomain
Func DomainTypes : Type -> TypeList;
Func CodomainType : Type -> Type;

Axiom DomainTypes(tau)! => CodomainType(tau)!;
Axiom CodomainType(tau)! => DomainTypes(tau)!;
Axiom DomainTypes(FunctionType(domain, _)) ~> domain;
Axiom CodomainType(FunctionType(_, codomain)) ~> codomain;
Axiom FunctionType(DomainTypes(tau), CodomainType(tau)) ~> tau;

// ## TypeList operators.
// We're equating TypeList elements sometimes. In well-typed programs, this is only possible if the
// type lists have the same length and are made up of the same Types.
Func NilTypeList : TypeList;
Func ConsTypeList : Type * TypeList -> TypeList;
Axiom NilTypeList() = ConsTypeList(_, _) => Absurd();
Axiom ConsTypeList(head_0, tail_0) = ConsTypeList(head_1, tail_1) => head_0 = head_1 & tail_0 = tail_1;

// ## Joint injectivity of type operators.
Axiom VoidType() = BooleanType() => Absurd();
Axiom VoidType() = NumberType() => Absurd();
Axiom VoidType() = StringType() => Absurd();
Axiom VoidType() = FunctionType(_, _) => Absurd();

Axiom BooleanType() = NumberType() => Absurd();
Axiom BooleanType() = StringType() => Absurd();
Axiom BooleanType() = FunctionType(_, _) => Absurd();

Axiom NumberType() = StringType() => Absurd();
Axiom NumberType() = FunctionType(_, _) => Absurd();

Axiom StringType() = FunctionType(_, _) => Absurd();

Axiom
    FunctionType(domain_0, codomain_0) = FunctionType(domain_1, codomain_1)
    =>
    domain_0 = domain_1
    & codomain_0 = codomain_1
    ;

// ## Functions assigning to node elements their corresponding semantic Type elements.
Func SemanticType : TypeNode -> Type;
Func SemanticTypeOpt : TypeNodeOpt -> Type;
Func SemanticArgTypes : ArgList -> TypeList;

Axiom tn: TypeNode => SemanticType(tn)!;
Axiom tno: TypeNodeOpt => SemanticTypeOpt(tno)!;
Axiom ag: ArgList => SemanticArgTypes(ag)!;

// Since another axiom enforces that SemanticType is total, these rules will fire for all
// TypeNodes.
Axiom VoidTypeNode(tn) => VoidType() ~> SemanticType(tn);
Axiom BooleanTypeNode(tn) => BooleanType() ~> SemanticType(tn);
Axiom NumberTypeNode(tn) => NumberType() ~> SemanticType(tn);
Axiom StringTypeNode(tn) => StringType() ~> SemanticType(tn);
// Other axioms assert that SemanticArgTypes and SemanticType are total functions, so this rule
// will fire for al FunctionTypeNodes.
Axiom
    FunctionTypeNode(tn, args, codomain)
    =>
    FunctionType(SemanticArgTypes(args), SemanticType(codomain))
    ~>
    SemanticType(tn)
    ;

// SemanticTypeOpt is total, but only for SomeTypeNodeOpt elements does it have a determined type.
// If no other rules apply, it will be an opaque Type element determined only by the TypeNodeOpt
// element.
Axiom SemanticType(tn) ~> SemanticTypeOpt(SomeTypeNodeOpt(tn));

Axiom NilArgList(al) => NilTypeList() ~> SemanticArgTypes(al);
Axiom
    al = ConsArgList(_, head_type, tail)
    =>
    ConsTypeList(SemanticTypeOpt(head_type), SemanticArgTypes(tail))
    ~>
    SemanticArgTypes(al)
    ;


// # Variable resolution.
//
// For each node kind X in which variables matter, we introduce a partial function
//
//   VarTypeInX : Var * X -> Type
//
// and add axioms such that VarTypeInX(var, n) = sigma iff var is considered to be in scope for
// node n. sigma can be an opaque Type element. That var must be in scope for n means that var must
// have been introduced *before* n; it is not sufficient for n to introduce the variable.
//
// For X = StmtNodeList and X = ArgList, note that if n = ConsX(head, tail), then head appears
// before tail in source code. For example, if body is the StmtNodeList representing the body of a
// function, then none of the variables introduced in the body will be in scope for body. Instead,
// all of those variables are in scope at the NilStmtNodeList of body. Similarly, if args is the
// ArgList of a function definition, then the variables listed in args are only in scope for the
// NilArgList at the root of args.
Func VarTypeInStmts : Var * StmtNodeList -> Type;
Func VarTypeInFunction : Var * FunctionNode -> Type;
Func VarTypeInArgList : Var * ArgList -> Type;
Func VarTypeInExpr : Var * ExprNode -> Type;
Func VarTypeInExprs : Var * ExprNodeList -> Type;

// Forward declaration of the function assigning semantic types to expressions.
Func ExprType : ExprNode -> Type;

// ## Base cases: Nodes that introduce variables

// Every let statements introduces a variable.
Axiom
    ConsStmtNodeList(head, tail)!
    & LetStmtNode(head, var, expr)
    =>
    VarTypeInStmts(var, tail)
    ~>
    ExprType(expr)
    ;

// Every function statement introduces a variable for statements occuring after the function
// statement.
Axiom
    ConsStmtNodeList(head, tail)!
    & FunctionStmtNode(head, _)
    & Function(_, var, _, _ ,_)
    =>
    VarTypeInStmts(var, tail)!
    ;

// Every function node introduces the name of the function in the ArgList of the function (and
// hence, by the propagation axioms below, also in the body of the function).
Axiom
    Function(_, var, arg, _ ,_)
    =>
    VarTypeInArgList(var, arg)!
    ;

// Every function argument introduces a variable.
Axiom
    ConsArgList(var, tno, tail)!
    =>
    VarTypeInArgList(var, tail)
    ~>
    SemanticTypeOpt(tno)
    ;

// ## Errors due to multiple introductions of the same variable
//
// For each base node case that introduces a variable, it is an error if the variable is already in
// scope before the node.

Axiom LetStmtNode(head, var, _) & VarTypeInStmts(var, ConsStmtNodeList(head, _))! => Absurd();
Axiom
    FunctionStmtNode(head, func)
    & Function(func, var, _, _ ,_)
    & VarTypeInStmts(var, ConsStmtNodeList(head, _))!
    =>
    Absurd()
    ;
Axiom Function(func, var, _, _, _) & VarTypeInFunction(var, func)! => Absurd();
Axiom VarTypeInArgList(var, ConsArgList(var, _, _))! => Absurd();

// ## Propagation of variables through lists
//
// If a variable is in scope for ConsX(head, tail), then it should also be in scope for tail.

Axiom VarTypeInStmts(var, tail) ~> VarTypeInStmts(var, ConsStmtNodeList(_, tail));
Axiom VarTypeInArgList(var, tail) ~> VarTypeInArgList(var, ConsArgList(_, _, tail));
Axiom VarTypeInExprs(var, tail) ~> VarTypeInExprs(var, ConsExprNodeList(_, tail));

// ## Propagating variables through nodes
//
// If a variable is in scope before some node n, then it is usually also in scope at all nodes that
// make up n.

// ### Propagating into function bodies
//
// Apart from the variables propagated from outside of the scope of a function literal (which will
// be propagated later), the variables accessible in a function body are as follows:
// 1. The variables defined in the ambient scope of the function definition.
// 2. The name of the function (for recursive calls).
// 3. Function arguments.
//
// We propagate 1 and 2 into 3, and 3 into the function body.

// Propagate ambient variables into arg lists.
Axiom
    Function(func, _, args, _, _)
    =>
    VarTypeInArgList(var, args)
    ~>
    VarTypeInFunction(var, func)
    ;

// Propagate function names into arg lists.
Axiom
    Function(_, var, args, _, _)
    =>
    VarTypeInArgList(var, args)!
    ;

// By the "root" of a node list l we mean the unique nil node from which l can be obtained by
// repeated consing. We need access to the root of an ArgList so that we know the full set of
// variables introduced in that arg list.

// The axioms are such that RootNilArgList is total if every arg list is Nil or Cons (and not
// opaque).
Func RootNilArgList : ArgList -> ArgList;
Axiom NilArgList(args) => RootNilArgList(args) = args;
Axiom RootNilArgList(ConsArgList(_, _, tail)) ~> RootNilArgList(tail);

// Propagate variables from the arg list into the body.
Axiom
    Function(_, _, args, _, body)
    =>
    VarTypeInStmts(var, body)
    ~>
    VarTypeInArgList(var, RootNilArgList(args))
    ;

// ### Propagating variables through statements

// If a variable is in scope in the statement that defines a function, then the variable is also in
// scope of the ArgList of that function (which then means that it is in scope for the body).
Axiom
    stmts = ConsStmtNodeList(head, _)
    & FunctionStmtNode(head, func)
    =>
    VarTypeInFunction(var, func)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate variables through if statements.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & IfStmtNode(head, cond, true_branch, false_branch)
    & VarTypeInStmts(var, stmts) = sigma
    =>
    VarTypeInExpr(var, cond) = sigma
    & VarTypeInStmts(var, true_branch) = sigma
    & VarTypeInStmts(var, false_branch) = sigma
    ;

// Propagate variables through while statements.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & WhileStmtNode(head, _, body)
    =>
    VarTypeInStmts(var, body)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate variables through expression statements.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & ExprStmtNode(head, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate previously defined variables through let statements into initializer expressions.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & LetStmtNode(head, _, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// Propagate variables through return statements.
Axiom
    stmts = ConsStmtNodeList(head, _)
    & ReturnStmtNode(head, expr)
    =>
    VarTypeInExpr(var, expr)
    ~>
    VarTypeInStmts(var, stmts)
    ;

// ### Propagating variables through expressions

// Propagate variables through function application expressions.
Axiom
    AppExprNode(expr, func, args)
    & VarTypeInExpr(var, expr) = sigma
    =>
    VarTypeInExpr(var, func) = sigma
    & VarTypeInExprs(var, args) = sigma
    ;

// Propagate variables through function expression.
Axiom
    FunctionExprNode(expr, func)
    =>
    VarTypeInFunction(var, func)
    ~>
    VarTypeInExpr(var, expr)
    ;

// # Expression typing.
// Declared earlier:
// Func ExprType : ExprNode -> Type;
Func ExprTypes : ExprNodeList -> TypeList;

// Both ExprType and ExprTypes are total. Our axioms enforce that ExprTypes is given by mapping
// ExprType on each ExprNode element.
Axiom expr: ExprNode => ExprType(expr)!;
Axiom exprs: ExprNodeList => ExprTypes(exprs)!;

Axiom NilExprNodeList(exprs) => NilTypeList() ~> ExprTypes(exprs);
Axiom
    exprs = ConsExprNodeList(head, tail)
    =>
    ConsTypeList(ExprType(head), ExprTypes(tail))
    ~>
    ExprTypes(exprs)
    ;

// ## Typing constraints from usage of expressions in statements.
Axiom IfStmtNode(_, cond, _, _) => BooleanType() ~> ExprType(cond);
Axiom WhileStmtNode(_, cond, _) => BooleanType() ~> ExprType(cond);

// ## Typing constraints of expression from usages in other expression.
Axiom VariableExprNode(expr, var) & VarTypeInExpr(var, expr) = sigma => ExprType(expr) = sigma;
Axiom VoidExprNode(expr) => VoidType() ~> ExprType(expr);
Axiom FalseExprNode(expr) => BooleanType() ~> ExprType(expr);
Axiom TrueExprNode(expr) => BooleanType() ~> ExprType(expr);
Axiom StringLiteralExprNode(expr, _) => StringType() ~> ExprType(expr);
Axiom NumberLiteralExprNode(expr, _) => NumberType() ~> ExprType(expr);

// The conclusions of these axioms assert that DomainTypes or CodomainType are defined on some
// types tau. By the axioms relating these functions to FunctionType, this means that such types
// tau must be function types.
Axiom AppExprNode(_, func, args) => DomainTypes(ExprType(func)) ~> ExprTypes(args);
Axiom AppExprNode(expr, func, _) => CodomainType(ExprType(func)) ~> ExprType(expr);
